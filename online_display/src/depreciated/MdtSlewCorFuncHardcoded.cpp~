/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "src/MdtSlewCorFuncHardcoded.h"
#include "cmath"

namespace MuonCalib {

  //std::map<short, float> MdtSlewCorFuncHardcoded::m_LUT=std::map<short, float>();
  std::vector<double> MdtSlewCorFuncHardcoded::m_LUT = std::vector<double>();

MdtSlewCorFuncHardcoded::MdtSlewCorFuncHardcoded( const CalibFunc::ParVec& vec ) : IMdtSlewCorFunc(vec) {
  // m_LUT is vector of timeslew values using ADC ticks as index.
  // timeslew correction is negligible (<0.05 ns) for ADC>400 so don't bother computing it
  for( int i=0; i<400; i++ ) {
    m_LUT.push_back(109./calibrated_p(i));
  }
} 

double MdtSlewCorFuncHardcoded::correction(double /*t*/, double adc) const {
  if( adc>400. || adc<0. ) return 0;
  return m_LUT[static_cast<int>(adc)];
}

// Original version by Felix Rauscher
//double MdtSlewCorFuncHardcoded::correction(double /*t*/, double adc) const {
//  if(adc>500 || adc<0) return 0;
//  if(m_LUT.size()==0) {
//    float last_val(9e9);
//    for(short i=0;i<500; i++) {
//      float new_val=109/calibrated_p(i);
//      if(last_val - new_val > 0.2) {
//	last_val=new_val;
//	m_LUT[i]=new_val;
//      }
//      if (new_val<0.1) break;
//    }
//		std::cout<<"MdtSlewCorFuncHardcoded: Created LUT with "<<m_LUT.size()<<" entries"<<std::endl;
//  }
//	std::cout<<"XXxxXX"<<	 m_LUT.lower_bound(static_cast<short>(adc))->second - 109./calibrated_p(adc)<<std::endl;
//  return m_LUT.lower_bound(static_cast<short>(adc))->second;
//}

// Converts ADC to integrated charge
double MdtSlewCorFuncHardcoded::calibrated_p(const double &adc) const {
  double w = adc*25.0/32.0;    //ADC to ns
  return std::exp(1.11925e+00 + 2.08708e-02*w);
}

}  //namespace MuonCalib
