#include "src/TrackParam.cpp"
#include "src/Optimizer.cpp"
#include "src/Geometry.cpp"
#include "src/Event.cpp"
#include "src/Parameterization.cpp"
#include "src/EventDisplay.cpp"
#include "src/RTParam.cpp"
#include "src/ResolutionResult.cpp"
#include "src/IOUtility.cpp"
#include "src/RTAggregator.cpp"

using namespace Muon;

void TubeAutoCal(TString inputFileName = "run00187985_20190607.dat") {
  gROOT->SetBatch(kTRUE);



  TFile  f(IOUtility::getDecodedOutputFilePath(inputFileName));
  TTree* t = (TTree*)f.Get(IOUtility::EVENT_TREE_NAME);

  Geometry   geo = Geometry();
  geo.SetRunN(IOUtility::getRunN(inputFileName));


  RTAggregator rta = RTAggregator();

  for (int tdc = 0; tdc != Geometry::MAX_TDC; tdc++) {
    for (int chan = 0; chan != Geometry::MAX_TDC_CHANNEL; chan++) {
      if (tdc != geo.TRIGGER_MEZZ && geo.IsActiveTDCChannel(tdc, chan)) {
	rta.AddRT(new RTParam(geo));
      }
    }
  }
  rta.Initialize(IOUtility::getT0FilePath(inputFileName), IOUtility::getDecodedOutputFilePath(inputFileName));
  rta.InitTube(geo);

  
  TrackParam tp  = TrackParam(geo);
  tp.setVerbose(kFALSE);
  tp.setMaxResidual(3.0);
  tp.setVerbose(kFALSE);

  rta.rts[0]->setVerbose(kTRUE);
  rta.rts[0]->addDependency(&tp);
  rta.rts[0]->setMaxResidual(3.0);

  tp.SetRT(&rta);

  for (int i = 1; i != rta.rts.size(); i++) {
    rta.rts[0]->addSimultaneous(rta.rts.at(i));
  }
  
  rta.rts[0]->setTarget(t);
  rta.rts[0]->setRange(0, 100000);
  rta.rts[0]->optimize();

  
  
  TFile out(IOUtility::getAutoCalFilePath(inputFileName), "RECREATE");

  int thisTDC, thisChan;
  for (int i = 0; i != rta.rts.size(); i++) {
    rta.rts[i]->GetFirstActive(&thisTDC, &thisChan);
    rta.rts[i]->Write(TString::Format("tdc_%i_chan_%i", thisTDC, thisChan));
  }
  out.Write();
  out.Close();



}
